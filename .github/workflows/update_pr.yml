name: Update PR Description

on:
  pull_request:
    types:
      - synchronize

jobs:
  update-description:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Commits
        id: commits
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          COMMITS=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/commits" | jq -r '.[].commit.message')
          echo "::set-output name=commit-messages::$COMMITS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR Description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const commitMessages = core.getInput('commit-messages');
            const issueReferences = [];
            const regex = /urbanpiper\/issues-codex\/issues\/(\d+)/g;
            const matches = commitMessages.match(regex);
            if (matches) {
              issueReferences.push(...matches.map(match => `urbanpiper/issues-codex/issues/${match.split("/")[1]}`));
            }

            const pr = await github.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });

            const currentDescription = pr.data.body || '';
            const newDescription = `${currentDescription}\n\nIssue references: ${issueReferences.join(', ')}`;

            await github.pulls.update({
              owner,
              repo,
              pull_number: prNumber,
              body: newDescription,
            });
